<?php

/**
 * @file
 *
 * This api renders graph.inc data structures as graphs.
 * 
 * Additional content values are stuffed into a div
 * 
 * $g['node']['data'] = your data
 * $g['node']['data']['content'] = html contents used for rendering
 * $g[node]['edges'][node-to]['data'] = you link data
 */
function graphapi_new_graph() {
  return array();
}

function graphapi_add_node(&$graph, $id) {
  if (!isset($graph[$id])) {
    $graph[$id]['edges'] = array();
    $graph[$id]['data'] = array();
    $graph[$id]['data']['content']= $id;
  }
}

function graphapi_set_node_data(&$graph, $id, $data) {
  graphapi_add_node($graph, $id);
  $graph[$id]['data']= $data;
}

function graphapi_set_node_content(&$graph, $id, $content) {
  graphapi_add_node($graph, $id);
  $graph[$id]['data']['content']= $content;
}

function graphapi_add_link(&$graph, $from_id, $to_id) {
  graphapi_add_node($graph, $from_id);
  graphapi_add_node($graph, $to_id);
  $graph[$from_id]['edges'][$to_id] = array();
}

function graphapi_set_link_data(&$graph, $from_id, $to_id, $data) {
  graphapi_add_link($graph, $from_id, $to_id);
  $graph[$from_id]['edges'][$to_id]['data'] = $data;
}

/**
 * Renders the HTML for the given graph containing the canvas and divs
 * 
 * @param unknown_type $graph
 * @param unknown_type $config
 */
function graphapi_container($graph, $config = array()) {
  $default_config = array(
    'width' => '800',
    'height' => '600',
    'id' => 'default',
    'background-color' => 'grey',
    'node-width' => '40',
  );
  $config+= $default_config;
  $config['id'] = 'graphapi-' . $config['id'];
  $config['canvas-id'] = $config['id'] . '-canvas';
  
  $nl = "\n";
  $result = '';
  $result.= '<div id="' . $config['id'] .'" class="graphapi-container" style="-webkit-user-select:none; -moz-user-select:none; overflow: hidden; position: relative; background-color: '. $config['background-color'] . '; width:' . $config['width'] . 'px; ' . $config['height'] .'px;">';
  // We need to explicitly set width and height otherwise springy collapses
  $result.= $nl . '  <canvas id="' . $config['canvas-id'] . '" class="graphapi-canvas" style="background-color: transparant;" width="' . $config['width'] . '" height="' . $config['height'] .'"></canvas>';
  $result.= $nl . '<noscript>' . t('This page element requires JavaScript to be enabled.') . '</noscript>';
  $nodes = array();
  foreach ($graph as $id => $data) {
    $dom_id = _graphapi_uniform_id($config, $id);
    if (!(isset($data['data']) && isset($data['data']['content']))) {
      // Make sure we have content.
      $data['data']['content'] = $id;
    }
    $result .= $nl . theme_graph_node($dom_id, $data['data'], $config);
  }
  $result .= $nl . '</div>';
  _graphapi_add_graph( $graph, $config);
  return $result;

}

function theme_graph_node($dom_id, $data, $config) {
  $attributes = array(
    'id' => $dom_id,
    'style' => 'position:absolute;overflow:hidden',
    'class' => 'graphapi-node',
    'width' => isset($data['width']) ? $data['width'] : $config['node-width'],
  );
  $a = drupal_attributes($attributes);
  return '<div ' . $a . '>' . $data['content'] . '</div>';
}

function _graphapi_uniform_id($config, $id) {
  return $config['id'] . '-' . md5($id);
}

function _graphapi_add_graph( $graph, $config) {
  $dom_prefix = $config['id'];
  $path = drupal_get_path('module', 'graphapi');
  drupal_add_js($path . '/js/springy.js');
  drupal_add_js($path . '/js/graphapi.js');
  $links = drupal_json_encode(_graphapi_split_links($graph, $config));
  $links = preg_replace('/\},\{/', "},\n{", $links);
  drupal_add_js( 'jQuery(document).ready( function() {' 
      . "\n" .'var links = ' . $links . ';'
      . "\n" .'renderGraph("#' . $config['canvas-id']. '", links)});'
    , 'inline');
}

/**
 * Extract each pair (from, to) as separate item
 * 
 * @param array $graph
 */
function _graphapi_split_links($graph, $config) {
  $split = array();
  foreach( $graph as $from => $data) {
    if ($from=='_first') {
      //continue;
    }
    foreach ($data['edges'] as $to => $link_data) {
      if ($to=='_last') {
        //continue;
      }
      
      $link = array(
        'from' => _graphapi_uniform_id($config, $from),
        'to' => _graphapi_uniform_id($config, $to),
      );
      if (is_array($link_data)) {
        $link['data'] = $link_data;
        
      }
      $split[] = $link;
    }
  }
  return $split;	
}

function _graphapi_get_nodes($graph) {
  $nodes = array();
  foreach($graph as $from => $data) {
    $nodes[$from] = 1;
    foreach($data['edges'] as $to => $dummy ) {
      $nodes[$to] = 1;
    }
  }
  return $nodes;
}

function graphapi_reverse($graph, $keep_link_data = FALSE) {
  $result = $graph;
  foreach ($result as $key => $value) {
    $result[$key]['edges'] = array();
  }
  foreach ($graph as $key => $value) {
    foreach ($graph[$key]['edges'] as $link => $link_data) {
      $result[$link]['edges'][$key] = 1;
    }
  }
  return $result;
}