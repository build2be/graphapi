<?php

/**
 * @file
 *
 * This api renders includes/graph.inc data structures into visual graphs.
 *
 * The module makes use of the HTML5 canvas and adds
 * new HTML tags <edges> and <edge>
 *
 * $g['node']['data'] = your data
 * $g['node']['data']['title'] = simple label
 * $g['node']['data']['content'] = html contents used for rendering
 * $g['node']['edges']['node-to']['data'] = your link data
 */

/**
 * Creates a new empty graph array.
 */
function graphapi_new_graph() {
  return array();
}

/**
 * Adds a graph node to an existing graph array, if it doesn't already exist.
 *
 * @param $graph
 *   Graph array, passed by reference.
 * @param $id
 *   Id of the node to add.
 */
function graphapi_add_node(&$graph, $id) {
  if (!isset($graph[$id])) {
    $graph[$id]['edges'] = array();
    $graph[$id]['data'] = array();
    // Set the graph title to the $id, incase it isn't set later.
    $graph[$id]['data']['title']= $id;
  }
}

/**
 * Adds data to a graph node.
 *
 * @param $graph
 *   Graph array, passed by reference.
 * @param $id
 *   Id of the node to add data to.
 * @param $data
 *   Graph node data associative array, containing:
 *   - 'title': title of the graph node.
 *   - 'uri': URI of the graph node.
 *   - 'content': HTML string of body content of the graph node.
 */
function graphapi_set_node_data(&$graph, $id, $data) {
  graphapi_add_node($graph, $id);
  $graph[$id]['data']= $data;
}

/**
 * Sets the title of a graph node.
 *
 * @param $graph
 *   Graph array, passed by reference.
 * @param $id
 *   Id of the node for which to set the title.
 * @param $title
 *   Title string.
 */
function graphapi_set_node_title(&$graph, $id, $title) {
  graphapi_add_node($graph, $id);
  $graph[$id]['data']['title']= $title;
}

/**
 * Sets the uri of a graph node, to which the graph will link.
 *
 * @param $graph
 *   Graph array, passed by reference.
 * @param $id
 *   Id of the node for which to set the title.
 * @param $uri
 *   URI string.
 */
function graphapi_set_node_uri(&$graph, $id, $uri) {
  graphapi_add_node($graph, $id);
  $graph[$id]['data']['uri']= $uri;
}

/**
 * Sets the uri of a graph node, to which the graph will link.
 *
 * @param $graph
 *   Graph array, passed by reference.
 * @param $id
 *   Id of the node for which to set the title.
 * @param $content
 *   HTML string of body content.
 */
function graphapi_set_node_content(&$graph, $id, $content) {
  graphapi_add_node($graph, $id);
  $graph[$id]['data']['content']= $content;
}

/**
 * Adds a directed edge to the graph.
 *
 * @param $graph
 *   Graph array, passed by reference.
 * @param $from_id
 *   Id of the source graph node for the edge.
 * @param $to_id
 *   Id of the target graph not for the edge.
 */
function graphapi_add_link(&$graph, $from_id, $to_id) {
  graphapi_add_node($graph, $from_id);
  graphapi_add_node($graph, $to_id);
  if (!isset($graph[$from_id]['edges'][$to_id])) {
    $graph[$from_id]['edges'][$to_id] = array();
  }
}

/**
 * Adds a title to an existing edge in the graph.
 *
 * @param $graph
 *   Graph array, passed by reference.
 * @param $from_id
 *   Id of the source graph node for the edge.
 * @param $to_id
 *   Id of the target graph not for the edge.
 * @param $title
 *   Title string.
 */
function graphapi_set_link_title(&$graph, $from_id, $to_id, $title) {
  graphapi_add_link($graph, $from_id, $to_id);
  $graph[$from_id]['edges'][$to_id]['title'] = $title;
}

/**
 * Adds data to a graph node.
 *
 * @param $graph
 *   Graph array, passed by reference.
 * @param $from_id
 *   Id of the source graph node for the edge.
 * @param $to_id
 *   Id of the target graph not for the edge.
 * @param $data
 *   Graph node data associative array, containing:
 *   - 'title': title of the graph edge.
 */
function graphapi_set_link_data(&$graph, $from_id, $to_id, $data) {
  graphapi_add_link($graph, $from_id, $to_id);
  $graph[$from_id]['edges'][$to_id]['data'] = $data;
}

/**
 * Returns default graph settings.
 */
function graphapi_default_config() {
  return array(
    'id' => 'default',

    'background-color' => 'grey',
    'randomize' => true,
    'height' => 600,
    'width' => 800,
    'rankType' => 'TopBottom',
    'rankDepth' => 2,

    'menu' => TRUE,
  );
}


/**
 * Renders the HTML for the given graph containing the canvas and divs
 *
 * @param $graph
 *   Graph array.
 * @param $config
 *   Graph config array (see graphapi_default_config() for details).
 */
function graphapi_container($graph, $config = array()) {
  $config+= graphapi_default_config();
  $config['id'] = 'graphapi-' . $config['id'];
  $config['canvas-id'] = $config['id'] . '-canvas';

  $nl = "\n";
  $result = '';
  $result.= '<div id="' . $config['id'] .'"'
    .' class="graphapi" style="-webkit-user-select:none; -moz-user-select:none; overflow: hidden; position: relative;'
    .' background-color: '. $config['background-color']. ';'
    .' width:' . $config['width'] . 'px;'
    .' height:' . $config['height'] .'px;">';
  $result.= $nl . '<noscript>' . t('This page element requires JavaScript to be enabled.') . '</noscript>';
  $result.= $nl . theme_graphapi_links($graph, $config);
  $result.= '<div class="graphapi-nodes">';
  $nodes = array();
  foreach ($graph as $id => $data) {
    $dom_id = _graphapi_uniform_id($config, $id);
    if (!(isset($data['data']) && isset($data['data']['title']))) {
      $data['data']['title'] = $id;
    }
    $result .= $nl . theme_graphapi_node($dom_id, $data['data'], $config);
  }
  $result .= $nl . '</div>';
  $result .= $nl . '</div>';
  _graphapi_add_graph( $graph, $config);
  return $result;

}

/**
 * Implements hook_theme()
 */
function graphapi_theme() {
  return array(
    'graphapi_container' => array(
      'graph' => NULL,
      'config' => NULL,
    ),
  );
}

/**
 * Theme implementation, returns GraphAPI container as HTML.
 */
function theme_graphapi_container($graph, $config = array()) {
  return graphapi_container($graph, $config);
}

/**
 * Theme implementation, returns graph title as HTML.
 */
function theme_graphapi_title($title, $data) {
  $attributes = array(
    'class' => 'graphapi-title',
  );
  if (isset($data['background-color'])) {
    $attributes['style'] = 'background-color: ' . $data['background-color'] . ';';
  }
  $a = drupal_attributes($attributes);

  if (isset($data['uri'])) {
    $title = '<a href="' . $data['uri'] . '">' . $title . '</a>';
  }
  return '<div ' . $a . '>' . $title . '</div>';

}
/**
 * Theme implementation, returns graph node as HTML.
 */
function theme_graphapi_node($dom_id, $data, $config) {
  $attributes = array(
    'id' => $dom_id,
    'class' => 'graphapi-node',
  );
  // We always add a rank ... all ranks <= 0 are not used for layout
  $attributes['rank'] = isset($data['rank']) ? $data['rank'] : 0;
  $a = drupal_attributes($attributes);

  if (isset($data['content'])) {
    $content = '<div class="graphapi-content" title="'. $data['title'] . '">' . $data['content'] . '</div>';
  }
  else {
    $content ='';
  }
  return '<div ' . $a . '>' . theme_graphapi_title($data['title'] , $data) . $content  . '</div>';
}

/**
 * Theme implementation, returns graph edge as HTML.
 */
function theme_graphapi_link($link) {
  $html = '<edge';
  $html.= ' from="' . $link['from'] . '"';
  $html.= ' to="' . $link['to'] . '"';
  if (isset($link['data']['type'])) {
    $html.= ' type="' . $link['data']['type'] . '"';
  }
  if (isset($link['data']['color'])) {
    $html.= ' color="' . $link['data']['color'] . '"';
  }
  if (isset($link['data']['classes'])) {
    $classes = $link['data']['classes'];
    $class = join(" ", $classes);
    $html.= ' class="' . $class . '"';
  }
  $html.= '>';
  if (isset($link['title'])) {
    $html.= '<a href="#" title="' . $link['title'] . '">&curren;</a>';
  }
  $html.='</edge>';

  return $html;
}

/**
 * Returns the <edge> canvas node for the given graph.
 *
 * @param $graph
 *   Graph array.
 * @param $config
 *   Graph config array (see graphapi_default_config() for details).
 */
function theme_graphapi_links($graph, $config) {
  $result = '<edges>';
  foreach( $graph as $from => $data) {
    foreach ($data['edges'] as $to => $link_data) {
      $link = array(
        'from' => _graphapi_uniform_id($config, $from),
        'to' => _graphapi_uniform_id($config, $to),
      );
      if (isset($link_data['title'])) {
        $link['title'] = $link_data['title'];
      }
      if (isset($link_data['data'])) {
        $link['data']= $link_data['data'];
      }
      $result.= theme_graphapi_link($link);
    }
  }
  $result.= '</edges>';
  return $result;
}

/**
 * Helper function. Returns unique id for each node id.
 */
function _graphapi_uniform_id($config, $id) {
  return $config['id'] . '-' . md5($id);
}

/**
 * Helper function. Adds javascript and css on to drupal pages.
 */
function _graphapi_add_graph( $graph, $config) {
  $dom_prefix = $config['id'];
  $path = drupal_get_path('module', 'graphapi');
  drupal_add_library('system', 'ui.dialog');
  drupal_add_js($path . '/js/jquery-graphapi.js');
  drupal_add_css($path . '/css/graphapi.css');
  $conf = drupal_json_encode($config);
  $id = '#' . $config['id'];
  drupal_add_js( 'jQuery(document).ready( function() {'
      . "\n" .'  var config = ' . $conf . ';'
      . "\n" .'  jQuery("'.$id . '").graphapi(config);'
      . "\n" .'});'
    , 'inline');

  return;
}

/**
 * Reverses all edges on a graph.
 *
 * @param $graph
 *   Graph array.
 * @param $keep_link_data
 *   boolean: whether to keep the old link data (not yet implemented).
 *
 * @return
 *   $graph array with edges in opposite direction to original.
 */
function graphapi_reverse($graph, $keep_link_data = FALSE) {
  $result = $graph;
  foreach ($result as $key => $value) {
    $result[$key]['edges'] = array();
  }
  foreach ($graph as $key => $value) {
    foreach ($graph[$key]['edges'] as $link => $link_data) {
      $result[$link]['edges'][$key] = 1;
    }
  }
  return $result;
}

function graphapi_to_dot($graph) {
  $dot = array();
  $dot[] = "digraph {";
  foreach ($graph as $id => $node) {
    $dot[] = $id . ' [';

    $dot[] = 'label="' . $id . '"';
    $dot[] = ']';

    foreach ($node['edges'] as $eid => $edge) {
      $dot[] = "$id -> $eid";
    }
  }
  $dot[] = '}';

  return join("\n", $dot);
}

function graphapi_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'graphapi') . '/views',
  );
}
