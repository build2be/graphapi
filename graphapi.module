<?php

/**
 * @file
 *
 * This api renders graph.inc data structures as graphs.
 * 
 * Additional content values are stuffed into a div
 * 
 * $g['node']['data'] = your data
 * $g['node']['data']['title'] = simple label
 * $g['node']['data']['content'] = html contents used for rendering
 * $g[node]['edges'][node-to]['data'] = you link data
 */
function graphapi_new_graph() {
  return array();
}

function graphapi_add_node(&$graph, $id) {
  if (!isset($graph[$id])) {
    $graph[$id]['edges'] = array();
    $graph[$id]['data'] = array();
    $graph[$id]['data']['title']= $id;
  }
}

function graphapi_set_node_data(&$graph, $id, $data) {
  graphapi_add_node($graph, $id);
  $graph[$id]['data']= $data;
}

function graphapi_set_node_title(&$graph, $id, $title) {
  graphapi_add_node($graph, $id);
  $graph[$id]['data']['title']= $title;
}

function graphapi_set_node_content(&$graph, $id, $content) {
  graphapi_add_node($graph, $id);
  $graph[$id]['data']['content']= $content;
}

function graphapi_add_link(&$graph, $from_id, $to_id) {
  graphapi_add_node($graph, $from_id);
  graphapi_add_node($graph, $to_id);
  $graph[$from_id]['edges'][$to_id] = array();
}

function graphapi_set_link_data(&$graph, $from_id, $to_id, $data) {
  graphapi_add_link($graph, $from_id, $to_id);
  $graph[$from_id]['edges'][$to_id]['data'] = $data;
}

/**
 * Renders the HTML for the given graph containing the canvas and divs
 * 
 * @param unknown_type $graph
 * @param unknown_type $config
 */
function graphapi_container($graph, $config = array()) {
  $default_config = array(
    'menu' => false,
    'randomize' => true,
    'width' => '800',
    'height' => '600',
    'id' => 'default',
    'background-color' => 'grey',
  );
  $config+= $default_config;
  $config['id'] = 'graphapi-' . $config['id'];
  $config['canvas-id'] = $config['id'] . '-canvas';
  
  $nl = "\n";
  $result = '';
  $result.= '<div id="' . $config['id'] .'"'
    .' class="graphapi" style="-webkit-user-select:none; -moz-user-select:none; overflow: hidden; position: relative;'
    .' background-color: '. $config['background-color']. ';'
    .' width:' . $config['width'] . 'px;'
    .' height:' . $config['height'] .'px;">';
  $result.= $nl . '<noscript>' . t('This page element requires JavaScript to be enabled.') . '</noscript>';
  $result.= $nl . theme_graphapi_links($graph, $config);
  $result.= '<div class="graphapi-nodes">';
  $nodes = array();
  foreach ($graph as $id => $data) {
    $dom_id = _graphapi_uniform_id($config, $id);
    if (!(isset($data['data']) && isset($data['data']['title']))) {
      $data['data']['title'] = $id;
    }
    $result .= $nl . theme_graphapi_node($dom_id, $data['data'], $config);
  }
  $result .= $nl . '</div>';
  $result .= $nl . '</div>';
  _graphapi_add_graph( $graph, $config);
  return $result;

}

function graphapi_theme() {
  return array(
    'graphapi_container' => array(
      'graph' => NULL,
      'config' => NULL,
    ),
  );
}

function theme_graphapi_container($graph, $config) {
  return graphapi_container($graph, $config);
}

function theme_graphapi_title($title, $data) {
  $attributes = array(
    'class' => 'graphapi-title',
  );
  if (isset($data['background-color'])) {
    $attributes['style'] = 'background-color: ' . $data['background-color'] . ';';
  }
  $a = drupal_attributes($attributes);

  return '<div ' . $a . '>' . $title . '</div>';

}
function theme_graphapi_node($dom_id, $data, $config) {
  $attributes = array(
    'id' => $dom_id,
    'class' => 'graphapi-node',
  );
  $a = drupal_attributes($attributes);

  if (isset($data['content'])) {
    $content = '<div class="graphapi-content" title="'. $data['title'] . '">' . $data['content'] . '</div>';
  }
  else {
    $content ='';
  }
  return '<div ' . $a . '>' . theme_graphapi_title($data['title'] , $data) . $content  . '</div>';
}

function theme_graphapi_link($link) {
  return '<edge from="' . $link['from'] . '" to="' . $link['to'] . '"></edge>';
}

function theme_graphapi_links($graph, $config) {
  $result = '<edges>';
  foreach( $graph as $from => $data) {
    if ($from=='_first') {
      //continue;
    }
    foreach ($data['edges'] as $to => $link_data) {
      if ($to=='_last') {
        //continue;
      }

      $link = array(
        'from' => _graphapi_uniform_id($config, $from),
        'to' => _graphapi_uniform_id($config, $to),
      );
      if (is_array($link_data)) {
        $link['data'] = $link_data;

      }
      $result.= theme_graphapi_link($link);
    }
  }
  $result.= '</edges>';
  return $result;
}

function _graphapi_uniform_id($config, $id) {
  return $config['id'] . '-' . md5($id);
}

function _graphapi_add_graph( $graph, $config) {
  $dom_prefix = $config['id'];
  $path = drupal_get_path('module', 'graphapi');
  drupal_add_library('system', 'ui.dialog');
  drupal_add_js($path . '/js/jquery-graphapi.js');
  drupal_add_css($path . '/css/graphapi.css');
  $conf = drupal_json_encode($config);
  $id = '#' . $config['id'];
  drupal_add_js( 'jQuery(document).ready( function() {'
      . "\n" .'  var config = ' . $conf . ';'
      . "\n" .'  jQuery("'.$id . '").graphapi(config);'
      . "\n" .'});'
    , 'inline');

  return;
}

function graphapi_reverse($graph, $keep_link_data = FALSE) {
  $result = $graph;
  foreach ($result as $key => $value) {
    $result[$key]['edges'] = array();
  }
  foreach ($graph as $key => $value) {
    foreach ($graph[$key]['edges'] as $link => $link_data) {
      $result[$link]['edges'][$key] = 1;
    }
  }
  return $result;
}