<?php

/**
 * @file
 *
 * This api renders includes/graph.inc data structures into visual graphs.
 *
 * The module makes use of the HTML5 canvas and adds
 * new HTML tags <edges> and <edge>
 *
 * $g['node']['data'] = your data
 * $g['node']['data']['title'] = simple label
 * $g['node']['data']['content'] = html contents used for rendering
 * $g['node']['edges']['node-to']['data'] = your link data
 */

/**
 * Implements hook_menu().
 *
 * @see graphapi_demo_menu().
 */
function graphapi_menu() {
  $items = array(
    'graphapi/info' => array(
      'title' => 'Graph API entity info',
      'description' => 'Callback to provide more info on an entity.',
      'page callback' => 'graphapi_callback',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
    'admin/config/system/graphapi' => array(
      'title' => 'Graph API',
      'description' => 'Overview of Graph API and its supporting engines.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('graphapi_engines_form'),
      'access arguments' => array('administer site configuration'),
    ),
    'admin/config/system/graphapi/engines' => array(
      'title' => 'Engine forms overview',
      'description' => 'Overview of all engine forms',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('graphapi_engines_form'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
    ),
  );

  $engines = array('graphapi' => 'Graph API') + graphapi_get_engines();

  $default = TRUE;
  $weight = 0;
  foreach ($engines as $engine => $data) {
    $items["admin/config/system/graphapi/engines/$engine"] = array(
      'title' => $data,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('graphapi_engines_form', $engine),
      'access arguments' => array('administer site configuration'),
      'type' => $default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      'weight' => $weight++,
    );
    $default = FALSE;
  }

  return $items;
}

function graphapi_callback($engine, $entity_type, $entity_id) {
  $args = func_get_args();
  $items = array();
  $items[] = check_plain("Engine: $engine");
  $items[] = check_plain("Type: $entity_type");
  $items[] = check_plain("Id: $entity_id");

  $entity_info = array(
    'title' => '<strong>' . $node_id . '</strong>',
    'body' => '<div>' . theme('item_list', array('items' => $items)) . '</div>',
    // needed for forcedirected to indicate a successful retrieval.
    'success' => true,
  );
  drupal_json_output($entity_info);
}

/**
 * Helper function to remove the views oriented default values.
 *
 * @param array $values
 *
 * @return array
 *   A tree of key/value pairs
 *
 * @see hook_graphapi_settings_form()
 * @see views_plugin_style::option_definition()
 */
function _graphapi_remove_views_defaults($values = array()) {
  $result = array();
  foreach ($values as $key => $value) {
    if (isset($value['contains'])) {
      $result[$key] = _graphapi_remove_views_defaults($value['contains']);
    }
    else {
      $result[$key] = $value['default'];
    }
  }
  return $result;
}

function graphapi_engines_form($form, $form_state, $engine = 'graphapi') {
  $forms = graphapi_settings_form($form, $form_state);
  $form = array($engine => $forms[$engine]);
  $form[$engine]['#collapsed'] = FALSE;
  return $form;
}

function _graphapi_demo_graph() {
  $graph = graphapi_new_graph();
  graphapi_add_link($graph, "graphapi_relation", "relation");
  graphapi_add_link($graph, "graphapi_relation", "graphapi");
  graphapi_add_link($graph, "graphapi", "views");
  graphapi_add_link($graph, "php", "graphapi");
  graphapi_add_link($graph, "graphapi", "graph_phyz");
  graphapi_add_link($graph, "graphapi", "graphviz");
  graphapi_add_link($graph, "graphapi", "thejit");
  graphapi_add_link($graph, "thejit", "thejit_spacetree");
  graphapi_add_link($graph, "thejit", "thejit_forcedirected");
  graphapi_add_link($graph, "thejit", "thejit_x");
  return $graph;
}

/**
 * Creates a new empty graph array.
 */
function graphapi_new_graph() {
  return array();
}

/**
 * Adds a graph node to an existing graph array, if it doesn't already exist.
 *
 * @param $graph
 *   Graph array, passed by reference.
 * @param $id
 *   Id of the node to add.
 */
function graphapi_add_node(&$graph, $id) {
  if (!isset($graph[$id])) {
    $graph[$id]['edges'] = array();
    $graph[$id]['data'] = array();
    // Set the graph title to the $id, incase it isn't set later.
    $graph[$id]['data']['title'] = $id;
  }
}

/**
 * Adds data to a graph node.
 *
 * @param $graph
 *   Graph array, passed by reference.
 * @param $id
 *   Id of the node to add data to.
 * @param $data
 *   Graph node data associative array, containing:
 *   - 'title': title of the graph node.
 *   - 'uri': URI of the graph node.
 *   - 'content': HTML string of body content of the graph node.
 */
function graphapi_set_node_data(&$graph, $id, $data) {
  graphapi_add_node($graph, $id);
  $current_data = $graph[$id]['data'];
  // Merge with current data.
  if (is_array($current_data)) {
    //  Latest data is more important
    $data = $data + $current_data;
  }
  $graph[$id]['data'] = $data;
}

/**
 * Sets the title of a graph node.
 *
 * @param $graph
 *   Graph array, passed by reference.
 * @param $id
 *   Id of the node for which to set the title.
 * @param $title
 *   Title string.
 */
function graphapi_set_node_title(&$graph, $id, $title) {
  graphapi_add_node($graph, $id);
  $graph[$id]['data']['title'] = $title;
}

/**
 * Sets the uri of a graph node, to which the graph will link.
 *
 * @param $graph
 *   Graph array, passed by reference.
 * @param $id
 *   Id of the node for which to set the title.
 * @param $uri
 *   URI string.
 */
function graphapi_set_node_uri(&$graph, $id, $uri) {
  graphapi_add_node($graph, $id);
  $graph[$id]['data']['uri'] = $uri;
}

/**
 * Sets the content of a graph node.
 *
 * @param $graph
 *   Graph array, passed by reference.
 * @param $id
 *   Id of the node for which to set the title.
 * @param $content
 *   HTML string of body content.
 */
function graphapi_set_node_content(&$graph, $id, $content) {
  graphapi_add_node($graph, $id);
  $graph[$id]['data']['content'] = $content;
}

/**
 * Adds a directed edge to the graph.
 *
 * @param $graph
 *   Graph array, passed by reference.
 * @param $from_id
 *   Id of the source graph node for the edge.
 * @param $to_id
 *   Id of the target graph not for the edge.
 */
function graphapi_add_link(&$graph, $from_id, $to_id) {
  graphapi_add_node($graph, $from_id);
  graphapi_add_node($graph, $to_id);
  if (!isset($graph[$from_id]['edges'][$to_id])) {
    $graph[$from_id]['edges'][$to_id] = array();
  }
}

/**
 * Adds a title to an existing edge in the graph.
 *
 * @param $graph
 *   Graph array, passed by reference.
 * @param $from_id
 *   Id of the source graph node for the edge.
 * @param $to_id
 *   Id of the target graph not for the edge.
 * @param $title
 *   Title string.
 */
function graphapi_set_link_title(&$graph, $from_id, $to_id, $title) {
  graphapi_add_link($graph, $from_id, $to_id);
  $graph[$from_id]['edges'][$to_id]['title'] = $title;
}

/**
 * Adds data to a graph node.
 *
 * @param $graph
 *   Graph array, passed by reference.
 * @param $from_id
 *   Id of the source graph node for the edge.
 * @param $to_id
 *   Id of the target graph not for the edge.
 * @param $data
 *   Graph node data associative array, containing:
 *   - 'title': title of the graph edge.
 */
function graphapi_set_link_data(&$graph, $from_id, $to_id, $data) {
  graphapi_add_link($graph, $from_id, $to_id);
  $graph[$from_id]['edges'][$to_id]['data'] = $data;
}

/**
 * Returns default graph settings.
 */
function graphapi_default_config() {
  $temp = graphapi_settings_defaults();
  $result = $temp['settings']['graph'];
  $result['id'] = 'default';

  return $result;
}

/**
 * Provide default setup values
 *
 * @return type
 */
function graphapi_settings_defaults() {
  $result = array(
    'label' => t('Graph'),
    'settings' => array(
      'global' => array(
        'use_global' => FALSE,
      ),
      'graph' => array(
        'animate' => TRUE,
        'background-color' => 'grey',
        'height' => '800',
        'menu' => TRUE,
        'randomize' => TRUE,
        'rankType' => 'TopBottom',
        'rankDepth' => 2,
        'showLinks' => FALSE,
        'width' => '800',
      ),
      'physics' => array(
        'showForces' => FALSE,
        'applyAttractToCenter' => TRUE,
        'applyBoundingBox' => FALSE,
        'applyBoxOverlap' => FALSE,
        'applyCoulombsLaw' => TRUE,
        'applyDamping' => TRUE,
        'applyHookesLaw' => TRUE,
        'applyCompass' => FALSE,
      ),
      'links' => array(),
    ),
  );
  return $result;
}

/**
 * Implements hook_theme()
 */
function graphapi_theme() {
  return array(
    'graphapi_dispatch' => array(
      'variables' => array(
        'graph' => NULL,
        'config' => NULL,
      ),
    ),
    'graphapi_raw_data_graphapi' => array(
      'variables' => array(
        'graph' => NULL,
        'config' => NULL,
      ),
    ),
  );
}

/**
 * Dispatch the graph to the correct engine
 *
 * @param type $vars
 * @return type 
 */
function theme_graphapi_dispatch($vars) {
  $engines = graphapi_views_formats();
  $engine = '';
  if (isset($vars['config']['engine'])) {
    $engine = $vars['config']['engine'];
  }
  if (isset($engines[$engine])) {
    $theme = $engine . "_graphapi";
    return theme($theme, $vars);
  }
  else {
    if (!empty($engine)) {
      return t("Graph API render engine !engine not found.", array('!engine' => $engine));
    }
    else {
      return t("No Graph API render engines enabled. Check your modules page for a Graph API render engine");
    }
  }
}

/**
 * Rendering a graph from views
 * 
 * @param array $vars 
 */
function template_preprocess_views_graphapi_style_graphapi(&$vars) {
  _views_graphapi_style_build_graph_data($vars);
  //dsm(func_get_args(), __FUNCTION__);
  $config = $vars['graph-config'];
  $vars["xml"] = theme('graphapi_dispatch', array('graph' => $vars['graph'], 'config' => $config));
}

/**
 * Helper function. Returns unique id for each node id.
 */
function _graphapi_uniform_id($config, $id) {
  return $config['id'] . '-' . md5($id);
}

/**
 * Reverses all edges on a graph.
 *
 * @param $graph
 *   Graph array.
 * @param $keep_link_data
 *   boolean: whether to keep the old link data (not yet implemented).
 *
 * @return
 *   $graph array with edges in opposite direction to original.
 */
function graphapi_reverse($graph, $keep_link_data = FALSE) {
  $result = $graph;
  foreach ($result as $key => $value) {
    $result[$key]['edges'] = array();
  }
  foreach ($graph as $key => $value) {
    foreach ($graph[$key]['edges'] as $link => $link_data) {
      $result[$link]['edges'][$key] = 1;
    }
  }
  return $result;
}

function graphapi_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'graphapi') . '/views',
  );
}

/**
 * Return list of all hook_graphapi_formats
 */
function graphapi_views_formats() {
  return module_invoke_all('graphapi_formats');
}

/**
 * Implements hook_graphapi_default_settings().
 */
function graphapi_graphapi_default_settings() {
  $engine = 'graphapi';
  foreach (graphapi_global_settings() as $setting => $value) {
    if (!is_array($value)) {
      $settings[$engine]['contains'][$setting] = array('default' => $value);
    }
    else {
      foreach ($value as $key => $val) {
        $settings[$engine]['contains'][$setting]['contains'][$key] = array('default' => $val);
      }
    }
  }
  return $settings;
}

/**
 * Convert a settings array to a views compatible one.
 *
 * @param $engine
 * @param $values
 *
 * @see views_plugin_style::option_definition()
 */
function graphapi_settings_to_views($engine, $values) {
  $result = array(
    $engine => _graphapi_settings_to_views($values),
  );
  return $result;
}

function _graphapi_settings_to_views($value) {
  if (!is_array($value)) {
    $result = array('default' => $value);
  }
  else {
    $result = array();
    foreach ($value as $key => $val) {
      $result['contains'][$key] = _graphapi_settings_to_views($val);
    }
  }
  return $result;
}

function graphapi_global_settings() {
  return array(
    'width' => 1024,
    'height' => 800,
    'background-color' => 'grey',
    'cascade' => '',
  );
}

/**
 * Provide general settings
 */
function graphapi_global_settings_form($values) {
  $values += graphapi_global_settings();

  // This is our 'global' engine
  $engine = 'graphapi';
  $form[$engine] = array(
    '#title' => t('Global settings'),
    '#type' => 'fieldset',
    '#collapsed' => FALSE,
    '#collapsible' => TRUE,
  );
  $form[$engine]['width'] = array(
    '#title' => t('Width'),
    '#type' => 'textfield',
    '#default_value' => $values['width'],
  );
  $form[$engine]['height'] = array(
    '#title' => t('Height'),
    '#type' => 'textfield',
    '#default_value' => $values['height'],
  );
  $form[$engine]['background-color'] = array(
    '#title' => t('Background color'),
    '#type' => 'textfield',
    '#default_value' => $values['background-color'],
  );

  return $form;
}

/**
 * Gathers all relevant settings for all engines
 *
 * Each engine form is a fieldset containing it's specific settings
 * 
 * Ie width, height, background-color are graphapi settings
 * Ie show_menu or node_color is engine specific.
 * 
 * @see graphapi_global_settings_form().
 * @see graph_phyz_settings_form().
 */
function graphapi_settings_form($form, &$form_state) {
  $values = isset($form_state['values']) ? $form_state['values'] : array();
  if (!isset($values['graphapi'])) {
    $values['graphapi'] = array();
  }

  $form += graphapi_global_settings_form($values['graphapi']);

  $engines = graphapi_views_formats();
  $implementations = module_implements('graphapi_settings_form');
  $order = 1;
  foreach ($engines as $engine => $title) {
    if (in_array($engine, $implementations)) {
      $form += _graphapi_engine_form($engine, $values);
      $form[$engine]['#weight'] = $order++;
    }
    else {
      $no_settings = array();
      $no_settings[$engine] = array(
        '#title' => t($title),
        '#type' => 'fieldset',
        '#collapsed' => TRUE,
        '#collapsible' => FALSE,
      );
      $no_settings[$engine]['dummy'] = array(
        '#markup' => 'The engine does not yet support a graphapi settings form. You could check the issue queue for that module.',
      );
      $form += $no_settings;
      $form[$engine]['#weight'] = count($engines);
    }
    $form[$engine]['#collapsible'] = TRUE;
  }
  return $form;
}

/**
 * Helper function to get engine subforms
 */
function _graphapi_engine_form($engine, $values) {
  if (!isset($values[$engine])) {
    $values[$engine] = array();
  }
  $values = $values[$engine];
  $function = $engine . "_graphapi_settings_form";
  return call_user_func($function, $values);
}

function graphapi_demo_engines($engine = 'graph_phyz') {
  $graph = _graphapi_demo_graph();

  $config = array(
    'engine' => $engine,
    'width' => 400,
    'height' => 300,
    'background-color' => '#AAA',
    'duration' => 400,
  );
  return theme('graphapi_dispatch', array('graph' => $graph, 'config' => $config));
}

function _graphapi_mapping_options($engine) {
  $node_options = graphapi_node_properties($engine);
  $opts = array(
    0 => t('-none-'),
  );
  $opts['from'] = array();
  foreach ($node_options as $key => $label) {
    $opts['from']["from:$key"] = $label;
  }
  $opts['link'] = array(
    'link:color' => t('Link Color'),
  );
  $opts['to'] = array();
  foreach ($node_options as $key => $label) {
    $opts['to']["to:$key"] = $label;
  }
  return $opts;
}

function graphapi_node_properties($engine) {
  $result = array();
  $engines = graphapi_views_formats();
  if (isset($engines[$engine])) {
    $defaults = graphapi_graphapi_node_properties();
    $settings = module_invoke($engine, 'graphapi_node_properties');
    if (empty($settings)) {
      $settings = array();
    }
    $result = array_merge($defaults, $settings);
  }
  return $result;
}

function graphapi_graphapi_node_properties() {
  return array(
    'id' => 'ID',
    'label' => 'Label',
    'URI' => 'URI',
    'content' => 'Content',
  );
}

function graphapi_graphapi_link_properties() {
  return array(
  );
}

/**
 * Returns engines sorted by title.
 *
 * @return key-value array
 */
function graphapi_get_engines() {
  // TODO: currently title is the value but that could change.
  $engines = graphapi_views_formats();
  asort($engines);
  return $engines;
}
