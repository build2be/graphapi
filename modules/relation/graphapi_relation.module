<?php

/**
 * @file
 *
 * Provides integration with the relation module by
 * a custom field formatter
 *
 */
function graphapi_relation_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'graphapi_relation_default') {
    $settings += graphapi_default_config();
    $form['width'] = array(
      '#title' => t('Width'),
      '#type' => 'textfield',
      '#default_value' => $settings['width'],
    );
    $form['height'] = array(
      '#title' => t('Height'),
      '#type' => 'textfield',
      '#default_value' => $settings['height'],
    );
    $form['menu'] = array(
      '#title' => t('Show menu'),
      '#type' => 'checkbox',
      '#default_value' => $settings['menu'],
    );
    $form['showLinks'] = array(
      '#title' => t('Show link labels'),
      '#type' => 'checkbox',
      '#default_value' => $settings['showLinks'],
    );
    $form['background-color'] = array(
      '#title' => t('Background color'),
      '#type' => 'textfield',
      '#default_value' => $settings['background-color'],
    );
    $form['links'] = array(
      '#title' => t('Relation settings'),
      '#type' => 'fieldset',
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
    );
    $types = relation_get_types();
    foreach ($types as $type => $data) {
      $form['links'][$type] = array(
        '#title' => t($data->label),
        '#type' => 'fieldset',
        '#collapsed' => FALSE,
        '#collapsible' => TRUE,
      );
      $form['links'][$type]['color'] = array(
        '#title' => t('Color'),
        '#type' => 'textfield',
        '#default_value' => $settings['links'][$type]['color'],
      );
    }
    $form['physics'] = array(
      '#title' => t('Physics settings'),
      '#type' => 'fieldset',
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
    );

    foreach (_graphap_relation_physics() as $key => $title) {
      $form['physics'][$key] = array(
        '#title' => t($title),
        '#type' => 'checkbox',
        '#default_value' => $settings['physics'][$key],
      );
    }
  }
  return $form;
}

function _graphap_relation_physics() {
  return array(
    'showForces' => 'Show forces applied',
    'applyAttractToCenter' => 'Attract to center',
    'applyBoundingBox' => 'Bounding box',
    'applyBoxOverlap' => 'Do not overlap',
    'applyCoulombsLaw' => 'Apply Coulombs law',
    'applyDamping' => 'Use damping',
    'applyHookesLaw' => 'Apply Hookes law',
    'applyCompass' => 'Apply compass on directed links',
  );
}

function graphapi_relation_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  if ($display['type'] == 'graphapi_relation_default') {
    $summary = '';
    $items = array();
    $items[] = t('The relation graph is sized (@width x @height).', array('@width' => $settings['width'], '@height' => $settings['height']));
    if ($settings['menu']) {
      $items[] = t('The menu is displayed');
    }
    if ($settings['showLinks']) {
      $items[] = t('The link labels are displayed on hover');
    }

    $color = $settings['background-color'];
    $items[] = array('data' => 'Background color: <span style="background-color:' . $color . ';width:10px;">&nbsp;&nbsp;</span> (' . $color . ')');

    $summary .= theme('item_list', array('items' => $items, 'title' => 'Graph settings'));

    $items = array();
    $types = relation_get_types();
    foreach($types as $type => $data) {
      $color = $settings['links'][$type]['color'];
      $items[] = array('data' => $data->label . ': <span style="background-color:' . $color . ';width:10px;">&nbsp;&nbsp;</span> (' . $color . ')');
    }
    $summary .= theme('item_list', array('items' => $items, 'title' => 'Relations are colored'));

    $items = array();
    foreach (_graphap_relation_physics() as $key => $label) {
      if ($settings['physics'][$key]) {
        $items[] = t($label);
      }
    }
    $summary .= theme('item_list', array('items' => $items, 'title' => 'Physics settings'));

    return $summary;
  }
}

function graphapi_relation_field_formatter_info() {
  $types = relation_get_types();
  $links = array();
  foreach($types as $type => $data) {
    $links[$type] = array(
      'color' => 'green',
    );
  }
  return array(
    'graphapi_relation_default' => array(
      'label' => t('Graph'),
      'field types' => array('relation'),
      'settings' => array(
        'height' => '800',
        'width' => '800',
        'menu' => FALSE,
        'background-color' => 'grey',
        'applyCompass' => FALSE,
        'applyBoxOverlap' => TRUE,
        'showLinks' => FALSE,
        'animate' => TRUE,
        'randomize' => TRUE,
        'physics' => array(
          'showForces' => FALSE,
          'applyAttractToCenter' => FALSE,
          'applyBoundingBox' => FALSE,
          'applyBoxOverlap' => FALSE,
          'applyCoulombsLaw' => TRUE,
          'applyDamping' => TRUE,
          'applyHookesLaw' => TRUE,
          'applyCompass' => FALSE,
        ),
        'links' => $links,
      ),
    ),
  );
}

function graphapi_relation_default_link_data() {
  return array(
    'classes' => array(
      'edge',
    ),
    'color' => 'black',
  );
}

function graphapi_relation_default_config($id, $settings = array()) {
  return $settings + array(
    'id' => $id,
  );
}

/**
 * Implementation of hook_field_formatter_view
 *
 * As we only format relation_dummy_field joining all its relations
 * we stuff all relation types into $element[0]
 *
 * @return $element-array
 */
function graphapi_relation_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'] + graphapi_default_config();
  $physics = $settings['physics'];
  unset($settings['physics']);
  $settings += $physics;
  $relation_types = relation_get_types();
  $element = array();
  list($entity_id) = entity_extract_ids($entity_type, $entity);
  $graph = graphapi_new_graph();
  $source_id = $entity_type . "-" . $entity_id;
  graphapi_set_node_title($graph, $source_id, entity_label($entity_type, $entity));
  foreach ($items as $delta => $item) {
    $relation_type = $relation_types[$item->relation_type];
    foreach ($item->endpoints[LANGUAGE_NONE] as $endpoint) {
      $related_entities = entity_load($endpoint['entity_type'], array($endpoint['entity_id']));
      $related_entity = reset($related_entities);
      if ($related_entity) {
        $endpoint_id = $endpoint['entity_type'] . "-" . $endpoint['entity_id'];

        if ($endpoint['entity_type'] == $entity_type && $endpoint['entity_id'] == $entity_id) {
          // A self reference
          // TODO make graphapi handle self references
          // graphapi_add_link($graph, $source_id, $endpoint_id);
        } else {
          $label = entity_label($endpoint['entity_type'], $related_entity);
          $uri = entity_uri($endpoint['entity_type'], $related_entity);
          $linked_title = l($label, $uri['path'], $uri['options']);

          graphapi_set_node_title($graph, $endpoint_id, $linked_title);
          $link_data = graphapi_relation_default_link_data();
          if ($relation_type->directional) {
            $link_data['type'] = 'bi';
          }
          $link_data['color'] = $settings['links'][$relation_type->relation_type]['color'];
          $link_data['classes'][] = 'edge-' . $relation_type->relation_type;
          graphapi_set_link_title($graph, $source_id, $endpoint_id, $relation_type->label);
          graphapi_set_link_data($graph, $source_id, $endpoint_id, $link_data);
        }
      }
    }
  }
  $config = graphapi_relation_default_config($source_id . "-" . $delta, $settings);
  $element[0]['relation']['graph']['#markup'] = theme_graphapi_container($graph, $config);

  return $element;
}
