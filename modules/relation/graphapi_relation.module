<?php

/**
 * @file
 *
 * Provides integration with the relation module by
 * a custom field formatter
 *
 */
function graphapi_relation_field_formatter_info() {
  return array(
      'graphapi_relation_default' => array(
          'label' => t('Graph'),
          'field types' => array('relation'),
      ),
  );
}

/**
 * Implementation of hook_field_formatter_view
 *
 * As we only format relation_dummy_field joining all its relations
 * we stuff all relation types into $element[0]
 *
 * @return $element-array
 */
function graphapi_relation_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $relation_types = relation_get_types();
  $element = array();
  list($entity_id) = entity_extract_ids($entity_type, $entity);
  $graph = graphapi_new_graph();
  $source_id = $entity_type . "-" . $entity_id;
  graphapi_set_node_title($graph, $source_id, entity_label($entity_type, $entity));
  foreach ($items as $delta => $item) {
    $relation_type = $relation_types[$item->relation_type];
    foreach ($item->endpoints[LANGUAGE_NONE] as $endpoint) {
      $related_entities = entity_load($endpoint['entity_type'], array($endpoint['entity_id']));
      $related_entity = reset($related_entities);
      if ($related_entity) {
        $endpoint_id = $endpoint['entity_type'] . "-" . $endpoint['entity_id'];

        if ($endpoint['entity_type'] == $entity_type && $endpoint['entity_id'] == $entity_id) {
          // A self reference
          // TODO make graphapi handle self references
          // graphapi_add_link($graph, $source_id, $endpoint_id);
        } else {
          $label = entity_label($endpoint['entity_type'], $related_entity);
          $uri = entity_uri($endpoint['entity_type'], $related_entity);
          $linked_title = l($label, $uri['path'], $uri['options']);

          graphapi_set_node_title($graph, $endpoint_id, $linked_title);
          $link_data = graphapi_relation_default_link_data();
          if ($relation_type->directional ) {
            $link_data['type'] = 'bi';
            $link_data['color'] = 'green';
          }
          $link_data['classes'][] = 'edge-' . $relation_type->relation_type;
          graphapi_set_link_title($graph, $source_id, $endpoint_id, $relation_type->name);
          graphapi_set_link_data($graph, $source_id, $endpoint_id, $link_data);
        }
      }
    }
  }
  $element[0]['relation']['graph']['#markup'] = theme_graphapi_container($graph, $config = graphapi_relation_default_config($source_id . "-" . $delta));

  return $element;
}

function graphapi_relation_default_link_data() {
  return array(
    'classes' => array(
      'edge',
    ),
    'color' => 'black',
  );
}

function graphapi_relation_default_config($id) {
  return array(
      'id' => $id,
      'menu' => true,
      'width' => 600,
      'height' => 400,
      'background-color' => '#ccc',
      'applyCompass' => FALSE,
      'applyBoxOverlap' => TRUE,
  );
}

