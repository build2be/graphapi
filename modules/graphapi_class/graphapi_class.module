<?php

use Fhaculty\Graph\Loader\UmlClassDiagram;
use Fhaculty\Graph\GraphViz;
use Fhaculty\Graph\Graph;

/**
 * Implements hook_menu().
 */
function graphapi_class_menu() {
  $items['admin/config/system/graphapi/uml'] = array(
    'title' => 'UML Diagrams',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('graphapi_class_form'),
    'access arguments' => array('access devel information'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );
  return $items;
}

function graphapi_class_form($form, &$form_state) {
  $request = drupal_container()->get('request');
  $types = $request->query->get('ids');
  if (empty($types)) {
    $types = array('stdClass');
  }
  $types = array_combine($types, $types);
  ksort($types);
  graphapi_class_loader();
  $classes = get_declared_classes();
  asort($classes);
  $classes = array_combine($classes, $classes);
  $interfaces = get_declared_interfaces();
  asort($interfaces);
  $interfaces = array_combine($interfaces, $interfaces);
  $kinds = array(
    'services' => _graphapi_class_services(),
    'classes' => $classes,
    'interfaces' => $interfaces,
  );
  $form['class'] = array(
    '#type' => 'select',
    '#title' => 'Select your class or interface',
    '#description' => 'This class will be displayed as part of a Class Diagram.',
    '#options' => $kinds,
    '#required' => TRUE,
    '#multiple' => TRUE,
    '#size' => 20,
    '#default_value' => $types,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  $form['result'] = array(
    '#title' => 'Classes',
    '#prefix' => '<div>',
    '#markup' => graphapi_class_build($types),
    '#suffix' => '</div>',
  );
  return $form;
}

function graphapi_class_form_submit(&$form, &$form_state) {
  $class = $form_state['values']['class'];
  $list = join('+', $class);
  $options = array(
    'absolute' => TRUE,
    'query' => array(
      'ids' => array_keys($class),
    ),
  );
  $url = url('admin/config/system/graphapi/uml', $options);
  $form_state['redirect'] = array(
    $url,
    $options,
  );
  drupal_redirect_form($form_state);
}

/**
 * Load more Classes.
 *
 * TODO: This is hacky.
 *   Is there a better way to load ALL class definitions?
 */
function graphapi_class_loader() {
  graphapi_loader();

  new UmlClassDiagram();
  $gviz = new GraphViz($g = new Graph);
  $v = $g->createVertex('a');
  $g->createVertex()->createEdge($v);
  $g->createVertex()->createEdgeTo($v);

  $functions = array(
    'views_get_all_views' => FALSE,
    'simpletest_classloader_register' => FALSE,
    'simpletest_phpunit_get_available_tests' => FALSE,
  );
  Drupal::queue('graphapi_class_generator');
  $classes = array();
  foreach ($functions as $function => $factory) {
    if (function_exists($function)) {
      $result = $function();
      if ($factory) {
        $classes = array_merge($classes, $factory($result));
      }
    }
  }

  if (module_exists('simpletest')) {

    class graphapi_class_A extends Drupal\simpletest\UnitTestBase {

    }

    new graphapi_class_A();

    class graphapi_class_B extends Drupal\simpletest\DrupalUnitTestBase {

    }

    new graphapi_class_B();
  }
}

function _graphapi_class_get_cid(array $classes, $script_only) {
  $classes = array_flip($classes);
  $classes = array_keys($classes);
  asort($classes);
  $cid = __FUNCTION__ . '-' . join("-", $classes);
  $cid .= ($script_only ? '-1' : '-0');
  $cid = md5($cid);
  return $cid;
}

function _graphapi_class_get_cache($cid) {
  return cache()->get($cid);
}

function _graphapi_class_cache_set($cid, $data) {
  return cache()->set($cid, $data);
}

function _graphapi_class_services() {
  $yaml_discovery = new \Drupal\Component\Discovery\YamlDiscovery('services', \Drupal::moduleHandler()->getModuleDirectories());
  $yaml = $yaml_discovery->findAll();
  $classes = array();
  foreach ($yaml as $module => $services) {
    //dsm($services, $module);
    foreach ($services['services'] as $key => $value) {
      $classes[$value['class']]  = "$module:$key";
    }
  }
  //dsm($classes, __FUNCTION__);
  return $classes;
}

function graphapi_class_build(array $classes = array(), $script_only = FALSE) {
  graphapi_loader();
  _graphapi_class_services();
  $cid = _graphapi_class_get_cid($classes, $script_only);
  if ($o = _graphapi_class_get_cache($cid)) {
    return $o->data;
  }
  $result = array();

  $loader = new UmlClassDiagram();
  try {
    foreach ($classes as $class) {
      $loader->createVertexClass($class);
    }
  }
  catch (Exception $exc) {
    return $exc->getMessage();
  }

  foreach ($loader->createGraphsComponents() as $graph) {
    $executable = '/usr/local/bin/dot';
    $gviz = new GraphViz($graph);
    $gviz->setExecutable($executable);
    $gviz->setLayoutBy(GraphViz::LAYOUT_GRAPH, 'rankdir', 'BT');

    $gviz->setFormat('svg');
    try {
      if (!$script_only) {
        $result[] = $gviz->createImageHtml();
      }
    }
    catch (Exception $exc) {
      $result[] = $exc->getMessage();
    }
    $result[] = '<xmp>' . $gviz->createScript() . '</xmp>';
  }
  $result = join("<hr />", $result);
  _graphapi_class_cache_set($cid, $result);
  return $result;
}

function graphapi_class_cron() {
  $last_run = _graphapi_class_get_cache(__FUNCTION__);
  // Only generate every hour
  if ($last_run || $last_run->data > 3600 + time()) {
    return;
  }
  _graphapi_class_cache_set(__FUNCTION__, time());
  $queue = Drupal::queue('graphapi_class_generator');
  $names = get_declared_classes();
  foreach ($names as $name) {
    for ($script_only = 0; $script_only < 2; $script_only++) {
      $cid = _graphapi_class_get_cid(array($name), $script_only > 0);
      $cached_item = _graphapi_class_get_cache($cid);
      if ($cached_item === FALSE) {
        // Only when not cached already
        $graph = array(
          'name' => $name,
          'script_only' => $script_only,
        );
        watchdog('graphapi_class', 'Queued: ' . $name);
        $queue->createItem($graph);
      }
    }
  }
}

/**
 * Implements hook_queue_info().
 */
function graphapi_class_queue_info() {
  $queues['graphapi_class_generator'] = array(
    'title' => t('Generate all UML Graphs'),
    'worker callback' => 'graphapi_class_generator_worker',
    'cron' => array(
      'time' => 60,
    ),
  );
  return $queues;
}

/**
 * Queue worker callback.
 */
function graphapi_class_generator_worker($item) {
  $name = $item['name'];
  $script_only = $item['script_only'];
  watchdog('graphapi_class', 'Processing: ' . $name . " " . $script_only);
  graphapi_class_build(array($name), $script_only);
}
