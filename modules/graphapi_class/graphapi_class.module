<?php

use Fhaculty\Graph\Uml\ClassDiagramBuilder;
use Fhaculty\Graph\GraphViz;
use Fhaculty\Graph\Graph;
use Symfony\Component\Finder\Finder;
use Drupal\graphapi_class\Plugin\Filter\FilterTrivialGraphFormat;

/**
 * Implements hook_menu().
 */
function graphapi_class_menu() {
  $items['admin/config/system/graphapi/uml'] = array(
    'title' => 'UML Diagrams',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('graphapi_class_form'),
    'access arguments' => array('access devel information'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );
  return $items;
}

function graphapi_class_form($form, &$form_state) {
  $request = drupal_container()->get('request');
  $types = $request->query->get('ids');
  if (empty($types)) {
    $types = array('stdClass');
  }
  $types = array_combine($types, $types);
  ksort($types);
  graphapi_class_loader();
  $classes = get_declared_classes();
  asort($classes);
  $classes = array_combine($classes, $classes);
  $interfaces = get_declared_interfaces();
  asort($interfaces);
  $interfaces = array_combine($interfaces, $interfaces);
  $kinds = array(
    'services' => _graphapi_class_services(),
    'classes' => $classes,
    'interfaces' => $interfaces,
  );
  $form['class'] = array(
    '#type' => 'select',
    '#title' => 'Select your class or interface',
    '#description' => 'This class will be displayed as part of a Class Diagram.',
    '#options' => $kinds,
    '#required' => TRUE,
    '#multiple' => TRUE,
    '#size' => 20,
    '#default_value' => $types,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  $form['result'] = array(
    '#title' => 'Classes',
    '#prefix' => '<div>',
    '#markup' => graphapi_class_build($types),
    '#suffix' => '</div>',
  );
  return $form;
}

function graphapi_class_form_submit(&$form, &$form_state) {
  $class = $form_state['values']['class'];
  $list = join('+', $class);
  $options = array(
    'absolute' => TRUE,
    'query' => array(
      'ids' => array_keys($class),
    ),
  );
  $url = url('admin/config/system/graphapi/uml', $options);
  $form_state['redirect'] = array(
    $url,
    $options,
  );
  drupal_redirect_form($form_state);
}

/**
 * Load more Classes.
 *
 * TODO: This is hacky.
 *   Is there a better way to load ALL class definitions?
 */
function graphapi_class_loader() {
  graphapi_loader();

  class graphapi_entity_view extends Drupal\views\Entity\View {

  }

  ;

  class graphapi_entity_user extends Drupal\user\Entity\User {

  }

  ;

  //new ClassDiagramBuilder();
  $gviz = new GraphViz($g = new Graph);
  $v = $g->createVertex('a');
  $g->createVertex()->createEdge($v);
  $g->createVertex()->createEdgeTo($v);

  $functions = array(
    'views_get_all_views' => FALSE,
    'simpletest_classloader_register' => FALSE,
    'simpletest_phpunit_get_available_tests' => FALSE,
  );
  Drupal::queue('graphapi_class_generator');
  $classes = array();
  foreach ($functions as $function => $factory) {
    if (function_exists($function)) {
      $result = $function();
      if ($factory) {
        $classes = array_merge($classes, $factory($result));
      }
    }
  }

  if (module_exists('simpletest')) {

    class graphapi_class_A extends Drupal\simpletest\UnitTestBase {

    }

    new graphapi_class_A();

    class graphapi_class_B extends Drupal\simpletest\DrupalUnitTestBase {

    }

    new graphapi_class_B();
  }
}

function _graphapi_class_get_cid(array $classes) {
  // Make unique entries
  $classes = array_flip($classes);
  $classes = array_keys($classes);
  // Sort for hash
  asort($classes);
  $cid = __FUNCTION__ . '-' . join("-", $classes);
  $cid = md5($cid);
  return $cid;
}

function _graphapi_class_get_cache($cid) {
  return cache()->get($cid);
}

function _graphapi_class_cache_set($cid, $data) {
  return cache()->set($cid, $data);
}

function _graphapi_class_services() {
  $yaml_discovery = new \Drupal\Component\Discovery\YamlDiscovery('services', \Drupal::moduleHandler()->getModuleDirectories());
  $yaml = $yaml_discovery->findAll();
  $classes = array();
  foreach ($yaml as $module => $services) {
    //dsm($services, $module);
    foreach ($services['services'] as $key => $value) {
      $classes[$value['class']] = "$module:$key";
    }
  }
  //dsm($classes, __FUNCTION__);
  return array_keys($classes);
}

function graphapi_class_build_class(array $classes = array(), array $config = array()) {
  graphapi_loader();

  $config += array(
    'generate-script' => FALSE,
    'generate-image' => TRUE,
//    'type' => 'svg',
  );
  $options = array(
    'script' => $config['generate-script'],
    'render' => $config['generate-image'],
  );
  unset($config['generate-script']);
  unset($config['generate-image']);

//  $cid = _graphapi_class_get_cid($classes, $script_only);
//  if ($o = _graphapi_class_get_cache($cid)) {
//    return $o->data;
//  }
  $result = array();

  $g = new Graph();
  $loader = new ClassDiagramBuilder($g);
  foreach ($config as $option => $value) {
    $loader->setOption($option, $value);
  }
  // Reduce output.
  //$loader->setOption('only-self', TRUE);
  //$loader->setOption('only-public', TRUE);
  //$loader->setOption('show-constants', FALSE);
  try {
    foreach ($classes as $class) {
      $loader->createVertexClass($class);
    }
  }
  catch (Exception $exc) {
    return $exc->getMessage();
  }

  $render_options = array(
    'graphapi' => $options,
  );
//    $options = array(
//      'graphapi' => array(
//        'script' => FALSE,
//        'render' => TRUE,
//      )
//    );
  foreach ($loader->createGraphsComponents() as $graph) {
    $result[] = graphapi_render($graph, $render_options);
  }
  $total = join("<hr />", $result);
  //_graphapi_class_cache_set($cid, $total);
  return $total;
}

function graphapi_class_cron() {
  $last_run = _graphapi_class_get_cache(__FUNCTION__);
  // Only generate every hour
  if ($last_run && $last_run->data + 3600 > time()) {
    return;
  }
  _graphapi_class_cache_set(__FUNCTION__, time());
  _graphapi_class_generate_run();
}

function _graphapi_class_generate_run() {
  graphapi_loader();
  $queue = Drupal::queue('graphapi_class_generator');
  $classes = graphapi_classes_get_all();
  $queue->createItem(array(
    'classes' => $classes,
    'path' => 'core/blob',
  ));
  foreach ($classes as $path => $file) {
    $class = str_replace('/', '\\', $file);
    $class = str_replace('.php', '', $class);
    $cid = _graphapi_class_get_cid(array($class));
    $cached_item = _graphapi_class_get_cache($cid);
    if ($cached_item === FALSE) {
      // Only when not cached already
      $graph = array(
        'class' => $class,
        'path' => $path,
      );
      watchdog('graphapi_class', 'Queued: ' . $class);
      $queue->createItem($graph);
    }
  }
}

/**
 * Implements hook_queue_info().
 */
function graphapi_class_queue_info() {
  $queues['graphapi_class_generator'] = array(
    'title' => t('Generate all UML Graphs'),
    'worker callback' => 'graphapi_class_generator_worker',
    'cron' => array(
      'time' => 60,
    ),
  );
  return $queues;
}

/**
 * Queue worker callback.
 */
function graphapi_class_generator_worker($item) {
  if (isset($item['classes'])) {
    $classes = $item['classes'];
  }
  else {
    $classes = array($item['class']);
  }
  $path = 'public://' . $item['path'] . '.html';

  watchdog('graphapi_class', 'Processing: for ' . $path);
  $result = graphapi_class_build_class($classes);

  $cid = _graphapi_class_get_cid($classes);
  _graphapi_class_cache_set($cid, $result);

  @drupal_mkdir(dirname($path), null, TRUE);
  file_put_contents($path, $result);
}

function graphapi_classes_get_all() {
  $loader = drupal_classloader();
  // Directories to look for
  $prefixes = $loader->getPrefixes();
  $result = '';

  $all = array();
  foreach ($prefixes as $prefix => $dirs) {
    foreach ($dirs as $dir) {
      $result.= "$prefix : $dir \n";
      if (strpos($prefix, 'Drupal') !== 0) {
        continue;
      }
      if ($prefix == 'Drupal\Driver') {
        continue;
      }
      if ($prefix == 'Drupal\bartik') {
        continue;
      }
      if ($prefix == 'Drupal\seven') {
        continue;
      }
      if ($prefix == 'Drupal\bartik') {
        continue;
      }
      $all[] = $dir;
    }
  }

  // @see http://symfony.com/doc/current/components/finder.html
  $class_finder = new Finder();

  $root = $_SERVER["DOCUMENT_ROOT"];
  $classes = array();
  $class_finder->files()->name('*.php')->in($all);
//  $num = 10;
  foreach ($class_finder as $file) {
//    if ($num-- < 0) {
//      break;
//    }
    try {
      // Print the absolute path
      //print $file->getRealpath() . "\n";
      // Print the relative path to the file, omitting the filename
      //print $file->getRelativePath() . "\n";
      // Print the relative path to the file
      //print $file->getRelativePathname() . "\n";
      $class = $file->getRelativePathname();
      $path = str_replace($root, '', $file->getRealPath());
      //$path = str_replace($class, '', $path);
      // TODO: path from site root.
      $classes[$path] = $class;

      //break;
    }
    catch (Exception $exc) {
      echo $exc->getTraceAsString();
    }
  }
  return $classes;
}

/**
 * Implements hook_help().
 */
function graphapi_class_help($path, $arg) {
  if ($path == 'admin/help#graphapi_class') {
    $output = '';
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('The Graph API sub module graphapi_class generates UML Diagrams') . '</p>';
    $output .= '<h3>' . t('Uses') . '</h3>';
    $output .= '<dl>';
    $output .= '<dt>' . t('Using input filter Class Diagram') . '</dt>';
    $output .= '<dd>' . 'FilterTrivialGraphFormat::help(TRUE)' . '</dd>';
    $output .= '</dl>';
    return $output;
  }
}
