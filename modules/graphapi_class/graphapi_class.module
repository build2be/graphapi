<?php

use Fhaculty\Graph\Loader\UmlClassDiagram;
use Fhaculty\Graph\GraphViz;
use Fhaculty\Graph\Graph;

/**
 * Implements hook_menu().
 */
function graphapi_class_menu() {
  $items['admin/config/system/graphapi/uml'] = array(
    'title' => 'UML Diagrams',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('graphapi_class_form'),
    'access arguments' => array('access devel information'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );
  $items['admin/config/system/graphapi/uml/%'] = array(
    'title' => 'UML Diagrams',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('graphapi_class_form', 5),
    'access arguments' => array('access devel information'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 100,
  );
  return $items;
}

function graphapi_class_form($form, &$form_state, $types = 'stdClass') {
  $types = explode('+', $types);
  graphapi_class_loader();
  $classes = get_declared_classes();
  asort($classes);
  $classes = array_combine($classes, $classes);
  $interfaces = get_declared_interfaces();
  asort($interfaces);
  $interfaces = array_combine($interfaces, $interfaces);
  $kinds = array(
    'classes' => $classes,
    'interfaces' => $interfaces,
  );
  $form['class'] = array(
    '#type' => 'select',
    '#title' => 'Select your class or interface',
    '#description' => 'This class will be displayed as part of a Class Diagram.',
    '#options' => $kinds,
    '#required' => TRUE,
    '#multiple' => TRUE,
    '#size' => 10,
    '#default_value' => $types,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  $form['result'] = array(
    '#title' => 'Classes',
    '#prefix' => '<div>',
    '#markup' => graphapi_class_build($types),
    '#suffix' => '</div>',
  );
  return $form;
}

function graphapi_class_form_submit($form, &$form_state) {
  $class = $form_state['values']['class'];
  $list = join('+', $class);
  drupal_goto('admin/config/system/graphapi/uml/' . $list);
}

/**
 * Load more Classes.
 *
 * TODO: This is hacky.
 *   Is there a better way to load ALL class definitions?
 */
function graphapi_class_loader() {
  new UmlClassDiagram();
  $gviz = new GraphViz($g = new Graph);
  $v = $g->createVertex('a');
  $g->createVertex()->createEdge($v);
  $g->createVertex()->createEdgeTo($v);

  $functions = array(
    'views_get_all_views' => FALSE,
    'simpletest_classloader_register' => FALSE,
    'simpletest_phpunit_get_available_tests' => FALSE,
  );
  $classes = array();
  foreach ($functions as $function => $factory) {
    if (function_exists($function)) {
      $result = $function();
      if ($factory) {
        $classes = array_merge($classes, $factory($result));
      }
    }
  }

  if (module_exists('simpletest')) {

    class graphapi_class_A extends Drupal\simpletest\UnitTestBase {

    }

    new graphapi_class_A();

    class graphapi_class_B extends Drupal\simpletest\DrupalUnitTestBase {

    }

    new graphapi_class_B();
  }
}

function graphapi_class_build(array $classes = array(), $script_only = FALSE) {
  graphapi_init();
  $classes = array_flip($classes);
  $classes = array_keys($classes);
  asort($classes);
  $cid = __FUNCTION__ . '-' . join("-", $classes);
  $cid = md5($cid);
  $cache = cache();
  if ($o = $cache->get($cid)) {
    return $o->data;
  }
  $result = array();

  $loader = new UmlClassDiagram();
  try {
    foreach ($classes as $class) {
      $loader->createVertexClass($class);
    }
  }
  catch (Exception $exc) {
    return $exc->getMessage();
  }

  foreach ($loader->createGraphsComponents() as $graph) {
    $executable = '/usr/local/bin/dot';
    $gviz = new GraphViz($graph);
    $gviz->setExecutable($executable);
    $gviz->setLayoutBy(GraphViz::LAYOUT_GRAPH, 'rankdir', 'BT');

    $gviz->setFormat('svg');
    try {
      if (!$script_only) {
        $result[] = $gviz->createImageHtml();
      }
    }
    catch (Exception $exc) {
      $result[] = $exc->getMessage();
    }
    $result[] = '<xmp>' . $gviz->createScript() . '</xmp>';
  }
  $result = join("<hr />", $result);
  $cache->set($cid, $result);
  return $result;
}
